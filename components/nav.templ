package components

import (
  "fmt"
  "strings"
)

type NavLink struct {
  Url string
  Target string
  Text string
  Icon string
}


templ Navbar(useCustomNav bool, navComponent templ.Component) {
  if useCustomNav && navComponent != nil {
    @navComponent
  } else {
    @DefaultNav(WithDefaultNav())
  }
}

templ DefaultNav(links []NavLink) {
  
  <ul class="flex flex-wrap items-center justify-center mt-4">
    for _, link := range links {
      <li class="mr-6">
        <a 
          class="text-link-blue hover:underline underline-offset-4 hover:font-bold"
          href={templ.SafeURL(link.Url)}
          target={link.Target}
        >
          { link.Text }
        </a>
      </li>
    }
  </ul>

}

func WithDefaultNav() []NavLink {
  return []NavLink{
    {Url: "/", Target: "", Text: "home", Icon: ""},
    {Url: "https://github.com/masonictemple4", Target: "_blank", Text: "github", Icon: ""},
    {Url: "https://www.linkedin.com/in/mason-tucker-290b2b128/", Target: "_blank", Text: "linkedin", Icon: ""},
    {Url: "/resume", Target: "_self", Text: "resume", Icon: ""},
    {Url: "https://twitter.com/masonictemple4", Target: "_blank", Text: "x/twitter", Icon: ""},
    {Url: "/blog", Target: "", Text: "blog", Icon: ""},
  }
}

const detailPath = "detail?path="

templ Breadcrumbs(path string) {

      <nav className="w-2/3 max-w-2/3 mx-auto">
      <ul className="flex">
      for index, segment := range strings.Split(path, "/") {
        if index == len(strings.Split(path, "/")) - 1 {
          <li>
            <span>{segment} /</span>
          </li>
        } else {
          <li>
            <a href={templ.SafeURL(fmt.Sprintf("%s%s", detailPath, segment))}>
              <span className="text-link-blue hover:underline">{segment}</span>
            </a>
          </li>
          <li>
            <span className="mx-2">/</span>  // Delimiter
          </li>
        }
      }
//      {pathSegments.map((segment, index) => (
//        <li key={index}>
//        {index === pathSegments.length - 1 ? (
//          <span>{segment} /</span> 
//        ) : (
//          <Link href={`/${pathSegments.slice(0, index + 1).join('/')}`}>
//          <span className="text-link-blue hover:underline">{segment}</span>
//          </Link>
//        )}
//        {index !== pathSegments.length - 1 && (
//          <span className="mx-2">/</span>  // Delimiter
//        )}
//        </li>
//      ))}
      </ul>
      </nav>

}
